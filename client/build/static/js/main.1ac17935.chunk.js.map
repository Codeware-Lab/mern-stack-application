{"version":3,"sources":["reducer/authReducer.js","action/type.js","reducer/errorReducer.js","reducer/index.js","component/nav/Nav.js","middleware/middleware.js","action/action.js","component/signup/Signup.js","component/dashboard/Dashboard.js","component/login/Login.js","component/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","require","initialState","isAuthenticated","user","authReducer","state","action","type","payload","message","errorReducer","rootReducer","combineReducers","auth","error","Nav","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","connect","withRouter","props","useState","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","setError","newUser","useEffect","getErrorMessage","errors","console","log","to","length","map","err","index","key","msg","onSubmit","e","userInfo","history","preventDefault","dispatch","post","then","result","push","catch","response","data","htmlFor","id","value","onChange","target","userName","onClick","localStorage","removeItem","currentUser","setItem","jwt","decode","loginUser","Main","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","App","path","component","Signup","Login","Dashboard","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oiBACMA,EAAUC,EAAQ,KAElBC,EAAe,CACjBC,iBAAiB,EACjBC,KAAM,IAiBKC,EAdK,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAClD,OAAQA,EAAOC,MACX,ICVwB,mBDWpB,OAAO,2BACAF,GADP,IAEIH,iBAAkBH,EAAQO,EAAOE,SACjCL,KAAMG,EAAOE,UAErB,QACI,OAAOH,IEfbJ,EAAe,CACjBQ,QAAS,MAqBEC,EAlBM,WAAmC,IAAlCL,EAAiC,uDAAzBJ,EAAcK,EAAW,uCACnD,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,2BACAF,GADP,IAEII,QAASH,EAAOE,UAExB,IAAK,cACD,OAAO,2BACAH,GADP,IAEII,QAAS,OAEjB,QACI,OAAOJ,ICVJM,EALKC,YAAgB,CAChCC,KAAMT,EACNU,MAAOJ,ICIIK,EARH,WACR,OACI,6BACI,wD,yBCKGC,EARM,SAACC,GACdA,EACAC,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,SAE1CC,IAAMC,SAASC,QAAQC,OAAvB,e,kBCuCFC,EAAiB,SAACnB,GAC3B,MAAO,CACHI,KAAM,mBACNC,QAASL,IC+DFoB,eAPS,SAAClB,GAErB,MAAO,CACHQ,KAAMR,EAAMQ,KACZC,MAAOT,EAAMS,MAAML,WAGZc,CAAyBC,aAxGzB,SAACC,GAAU,MAEEC,mBAAS,IAFX,mBAEfC,EAFe,KAETC,EAFS,OAGIF,mBAAS,IAHb,mBAGfG,EAHe,KAGRC,EAHQ,OAIUJ,mBAAS,IAJnB,mBAIfK,EAJe,KAILC,EAJK,OAKwBN,mBAAS,IALjC,mBAKfO,EALe,KAKEC,EALF,OAMIR,mBAAS,IANb,mBAMfZ,EANe,KAMRqB,EANQ,KAShBC,EAAU,CACZT,KAAKA,EACLE,MAAMA,EACNE,SAASA,EACTE,gBAAgBA,GAGpBI,qBAAU,WACNC,MACD,CAACb,EAAMX,QAEV,IAAMwB,EAAkB,WACD,OAAhBb,EAAMX,OACTqB,EAASV,EAAMX,MAAMyB,SAIzBC,QAAQC,IAAI,QAAS3B,GAmBrB,OACI,6BACI,kBAAC,IAAD,CAAM4B,GAAG,KAAT,gBACA,6CACA,wDAA6B,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAC7B,6BACC5B,EAAM6B,OAAS,EAAG,4BAAK7B,EAAM8B,KAAI,SAACC,EAAIC,GAAL,OAAe,wBAAIC,IAAKD,GAAQD,EAAIG,SAAmB,KACzF,6BACI,0BAAM1C,OAAO,GAAG2C,SAzBN,SAACC,GD9BD,IAACC,EAAUC,EC+B7BF,EAAEG,iBACF5B,EAAM6B,UDhCaH,ECgCOf,EDhCGgB,ECgCM3B,EAAM2B,QDhCA,SAACE,GAC9CpC,IAAMqC,KAAK,UAAWJ,GACjBK,MAAK,SAAAC,GACFL,EAAQM,KAAK,UACblB,QAAQC,IAAIgB,MAEfE,OAAM,SAAAd,GAEHS,EAAS,CACL/C,KAAM,YACNC,QAASqC,EAAIe,SAASC,OAE1BP,EAAS,CACL/C,KAAM,wBC2CF,6BACI,2BAAOuD,QAAQ,QAAf,QACA,2BACIvD,KAAK,OACLwD,GAAG,OACHC,MAAOrC,EACPsC,SAAU,SAAAf,GAAC,OAAItB,EAAQsB,EAAEgB,OAAOF,WAGxC,6BACI,2BAAOF,QAAQ,SAAf,SACA,2BACIvD,KAAK,QACLwD,GAAG,QACHC,MAAOnC,EACPoC,SAAU,SAAAf,GAAC,OAAIpB,EAASoB,EAAEgB,OAAOF,WAGzC,6BACI,2BAAOF,QAAQ,YAAf,YACA,2BACIvD,KAAK,WACLwD,GAAG,WACHC,MAAOjC,EACPkC,SAAU,SAAAf,GAAC,OAAIlB,EAAYkB,EAAEgB,OAAOF,WAG5C,6BACI,2BAAOF,QAAQ,mBAAf,oBACA,2BACIvD,KAAK,WACLwD,GAAG,kBACHC,MAAO/B,EACPgC,SAAU,SAAAf,GAAC,OAAIhB,EAAmBgB,EAAEgB,OAAOF,WAGnD,4BAAQzD,KAAK,UAAb,kBCrELgB,eAPS,SAAClB,GAErB,OADAmC,QAAQC,IAAI,QAASpC,GACd,CACHQ,KAAMR,EAAMQ,QAILU,CAAyBC,aAvBtB,SAACC,GACfe,QAAQC,IAAI,QAAShB,GAMrB,OACI,6BACI,0CAAgBA,EAAMZ,KAAKV,KAAKgE,UAChC,gFACA,4BAAQC,QARM,WF4CA,IAAChB,EE3CnB3B,EAAM6B,UF2CaF,EE3CO3B,EAAM2B,QF2CD,SAACE,GACpCe,aAAaC,WAAW,YACxBtD,GAAa,GACbsC,EAAShC,EAAe,KACxB8B,EAAQM,KAAK,UExCL,eCoEGnC,eATS,SAAClB,GAErB,OADAmC,QAAQC,IAAI,QAASpC,GACd,CACHQ,KAAMR,EAAMQ,KACZC,MAAOT,EAAMS,MAAML,WAKZc,CAAyBC,aAzE1B,SAACC,GACXe,QAAQC,IAAI,QAAShB,GADA,MAEKC,mBAAS,IAFd,mBAEdG,EAFc,KAEPC,EAFO,OAGWJ,mBAAS,IAHpB,mBAGdK,EAHc,KAGJC,EAHI,OAIKN,mBAAS,IAJd,mBAIdZ,EAJc,KAIPqB,EAJO,KAMfoC,EAAc,CAChB1C,MAAOA,EACPE,SAAUA,GAIdM,qBAAU,WACNC,MACD,CAACb,EAAMX,QAEV,IAAMwB,EAAkB,WACD,OAAhBb,EAAMX,OACTqB,EAASV,EAAMX,MAAMyB,SAIzBC,QAAQC,IAAI,QAAS3B,GAOrB,OACI,6BACI,kBAAC,IAAD,CAAM4B,GAAG,KAAT,gBACA,4CACA,sDAA2B,kBAAC,IAAD,CAAMA,GAAG,WAAT,YAC3B,6BACA,6BACC5B,EAAM6B,OAAS,EAAG,4BAAK7B,EAAM8B,KAAI,SAACC,EAAIC,GAAL,OAAe,wBAAIC,IAAKD,GAAQD,EAAIG,SAAmB,KACzF,6BACI,0BAAM1C,OAAO,GAAG2C,SAdD,SAACC,GACxBA,EAAEG,iBACF5B,EAAM6B,SHdW,SAACiB,EAAanB,GAAd,OAA0B,SAACE,GAChDpC,IAAMqC,KAAK,SAAUgB,GAChBf,MAAK,SAAAC,GAAW,IACLxC,EAAUwC,EAAOI,KAAjB5C,MACRoD,aAAaG,QAAQ,WAAYvD,GACjCD,EAAaC,GAEbqC,EAAShC,EAAemD,IAAIC,OAAOzD,KACnCmC,EAAQM,KAAK,iBAEhBC,OAAM,SAAAd,GAEHS,EAAS,CACL/C,KAAM,YACNC,QAASqC,EAAIe,SAASC,OAE1BP,EAAS,CACL/C,KAAM,oBGHCoE,CAAUJ,EAAa9C,EAAM2B,YAahC,6BACI,2BAAOU,QAAQ,SAAf,SACA,2BACIvD,KAAK,QACLwD,GAAG,QACHC,MAAOnC,EACPoC,SAAU,SAAAf,GAAC,OAAIpB,EAASoB,EAAEgB,OAAOF,WAGzC,6BACI,2BAAOF,QAAQ,YAAf,YACA,2BACIvD,KAAK,WACLwD,GAAG,WACHC,MAAOjC,EACPkC,SAAU,SAAAf,GAAC,OAAIlB,EAAYkB,EAAEgB,OAAOF,WAG5C,4BAAQzD,KAAK,UAAb,iBCpDLqE,EAXF,WACT,OACI,6BACQ,2BAAG,yCAAH,qCACA,sGACA,kBAAC,IAAD,CAAMlC,GAAG,WAAW,4CACpB,kBAAC,IAAD,CAAMA,GAAG,UAAU,6CCE7BmC,EAAQC,YAAYnE,EAAaoE,YACrCC,YAAgBC,KAChBC,OAAOC,8BAAgCD,OAAOC,iCAqBjCC,MAlBf,WACE,OACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,aAAaC,UAAWG,IACpC,kBAAC,IAAD,CAAOJ,KAAK,IAAIK,OAAK,EAACJ,UAAWV,SChBzBe,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd7C,OAAM,SAAA7C,GACL0B,QAAQ1B,MAAMA,EAAML,c","file":"static/js/main.1ac17935.chunk.js","sourcesContent":["import * as actionTypes from '../action/type';\nconst isEmpty = require('is-empty');\n\nconst initialState = {\n    isAuthenticated: false,\n    user: {}\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            }\n        default:\n            return state\n    }\n}\n\n\nexport default authReducer;","export const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const IS_LOADING = 'IS_LOADING';\nexport const GET_ERROR = 'GET_ERROR';\nexport const CLEAR_ERROR = 'CLEAR_ERROR';","import { GET_ERROR, CLEAR_ERROR } from '../action/type';\n\nconst initialState = {\n    message: null\n};\n\nconst errorReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'GET_ERROR':\n            return {\n                ...state,\n                message: action.payload\n            }\n        case 'CLEAR_ERROR':\n            return {\n                ...state,\n                message: null\n            }\n        default:\n            return state\n    }\n}\n\n\nexport default errorReducer;","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport errorReducer from './errorReducer';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    error: errorReducer\n});\n\nexport default rootReducer;","import React from 'react'\n\nconst Nav = () => {\n    return (\n        <div>\n            <h3>MERN STACK APPLICATION</h3>\n        </div>\n    )\n};\n\nexport default Nav;\n","import axios from 'axios';\n\nconst setAuthToken = (token) => {\n    if (token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        delete axios.defaults.headers.common['Authorization']\n    }\n};\n\nexport default setAuthToken;","import axios from 'axios';\nimport setAuthToken from '../middleware/middleware';\nimport jwt from 'jsonwebtoken';\nimport { SET_CURRENT_USER, GET_ERROR, CLEAR_ERROR } from './type';\n\nexport const signupUser = (userInfo, history) => (dispatch) => {\n    axios.post('/signup', userInfo)\n        .then(result => {\n            history.push('/login')\n            console.log(result)\n        })\n        .catch(err => {\n            // console.log(err)\n            dispatch({\n                type: 'GET_ERROR',\n                payload: err.response.data\n            })\n            dispatch({\n                type: 'CLEAR_ERROR'\n            })\n        })\n}\n\nexport const loginUser = (currentUser, history) => (dispatch) => {\n    axios.post('/login', currentUser)\n        .then(result => {\n            const { token } = result.data;\n            localStorage.setItem('jwtToken', token)\n            setAuthToken(token)\n                // console.log('result', result);\n            dispatch(setCurrentUser(jwt.decode(token)))\n            history.push('/dashboard')\n        })\n        .catch(err => {\n            // console.log(err)\n            dispatch({\n                type: 'GET_ERROR',\n                payload: err.response.data\n            })\n            dispatch({\n                type: 'CLEAR_ERROR'\n            })\n        })\n}\n\nexport const setCurrentUser = (user) => {\n    return {\n        type: 'SET_CURRENT_USER',\n        payload: user\n    }\n}\n\nexport const logoutUser = (history) => (dispatch) => {\n    localStorage.removeItem('jwtToken');\n    setAuthToken(false);\n    dispatch(setCurrentUser({}))\n    history.push('/')\n}\n\nexport const getErrorMessage = (error) => {\n    return {\n        type: 'GET_ERROR',\n        payload: error\n    }\n}\n\nexport const clearError = () => {\n    return {\n        type: 'CLEAR_ERROR'\n    }\n}","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport { signupUser,getErrorMessage } from '../../action/action';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport { Link } from 'react-router-dom';\n\nconst Signup = (props) => {\n    // console.log('props', props)\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [error, setError] = useState({})\n\n\n    const newUser = {\n        name:name,\n        email:email,\n        password:password,\n        confirmPassword:confirmPassword\n    }\n\n    useEffect(() => {\n        getErrorMessage()\n    }, [props.error])\n\n    const getErrorMessage = () => {\n        if(props.error !== null) {\n        setError(props.error.errors)\n        }\n    }\n\n    console.log('error', error)\n        \n    const submitHandler = (e) => {\n        e.preventDefault();\n        props.dispatch(signupUser(newUser, props.history))\n    }\n\n    // let errorMessage;\n    // if(error.length >0) {\n    //     error.forEach(err => errorMessage =(\n    //         <ul>\n    //             <li>{err.msg}</li>\n    //         </ul>\n    //     ))\n    // } else {\n    //     errorMessage = ''\n    // }\n\n\n    return (\n        <div>\n            <Link to='/' >BACK TO HOME</Link>\n            <h3>Sign up below</h3>\n            <h5>Already have an account? <Link to='/login'>Log in</Link></h5>\n            <br/>\n            {error.length > 0? <ul>{error.map((err,index) => <li key={index}>{err.msg}</li>)}</ul> : null}\n            <div>\n                <form action=\"\" onSubmit={submitHandler}>\n                    <div>\n                        <label htmlFor=\"name\">Name</label>\n                        <input \n                            type=\"text\"\n                            id=\"name\"\n                            value={name}\n                            onChange={e => setName(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"email\">Email</label>\n                        <input \n                            type=\"email\"\n                            id=\"email\"\n                            value={email}\n                            onChange={e => setEmail(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"password\">Password</label>\n                        <input \n                            type=\"password\"\n                            id=\"password\"\n                            value={password}\n                            onChange={e => setPassword(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <input \n                            type=\"password\"\n                            id=\"confirmPassword\"\n                            value={confirmPassword}\n                            onChange={e => setConfirmPassword(e.target.value)}\n                        />\n                    </div>\n                    <button type=\"submit\">SIGN UP</button>\n                </form>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    // console.log('state', state)\n    return {\n        auth: state.auth,\n        error: state.error.message\n    }\n}\nexport default connect(mapStateToProps)(withRouter(Signup));\n\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {logoutUser} from '../../action/action';\n\nconst Dashboard = (props) => {\n    console.log('props', props)\n\n    const logoutHandler = () => {\n        props.dispatch(logoutUser(props.history))\n    }\n\n    return (\n        <div>\n            <h3>Hey there, {props.auth.user.userName}</h3>\n            <h5>You are logged in a full-stack MERN application.</h5>\n            <button onClick={logoutHandler}>LOGOUT</button>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    console.log('state', state)\n    return {\n        auth: state.auth\n    }\n}\n\nexport default connect(mapStateToProps)(withRouter(Dashboard));\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport setAuthToken from '../../middleware/middleware';\nimport {Link} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport { loginUser} from '../../action/action';\nimport Dashboard from '../dashboard/Dashboard';\nimport {SET_CURRENT_USER} from '../../action/type';\n\n\nconst Login = (props) => {\n    console.log('props', props)\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState({});\n\n    const currentUser = {\n        email: email,\n        password: password\n    }\n\n\n    useEffect(() => {\n        getErrorMessage()\n    }, [props.error])\n\n    const getErrorMessage = () => {\n        if(props.error !== null) {\n        setError(props.error.errors);\n        }\n    }\n\n    console.log('error', error)\n\n    const loginSubmitHandler = (e) => {\n        e.preventDefault();\n        props.dispatch(loginUser(currentUser, props.history));\n    }\n\n    return (\n        <div>\n            <Link to='/' >BACK TO HOME</Link>\n            <h3>Log in below</h3>\n            <h5>Don't have an account? <Link to='/signup'>Sign up</Link></h5>\n            <br/>\n            <br/>\n            {error.length > 0? <ul>{error.map((err,index) => <li key={index}>{err.msg}</li>)}</ul> : null}\n            <div>\n                <form action=\"\" onSubmit={loginSubmitHandler}>\n                    <div>\n                        <label htmlFor=\"email\">Email</label>\n                        <input \n                            type=\"email\"\n                            id=\"email\"\n                            value={email}\n                            onChange={e => setEmail(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"password\">Password</label>\n                        <input \n                            type=\"password\"\n                            id=\"password\"\n                            value={password}\n                            onChange={e => setPassword(e.target.value)}\n                        />\n                    </div>\n                    <button type=\"submit\">LOG IN</button>\n                </form>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    console.log('state', state)\n    return {\n        auth: state.auth,\n        error: state.error.message\n    }\n}\n\n\nexport default connect(mapStateToProps)(withRouter(Login));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Signup from '../signup/Signup';\nimport Login from '../login/Login';\n\nconst Main = () => {\n    return (\n        <div>\n                <p><strong>Build</strong> a login/auth app with MERN STACK</p>\n                <h5>Create a minimal full-stack app with user authentication via JWT token</h5>\n                <Link to='/signup' ><button>SIGN UP</button></Link>\n                <Link to='/login' ><button>LOG IN</button></Link>\n        </div>\n    )\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport {Switch, BrowserRouter as Router, Route} from 'react-router-dom';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport {Provider} from 'react-redux';\nimport rootReducer from './reducer/index';\nimport Nav from './component/nav/Nav';\nimport Main from './component/main/Main';\nimport Signup from './component/signup/Signup';\nimport Login from './component/login/Login';\nimport Dashboard from './component/dashboard/Dashboard';\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            <Route path='/signup' component={Signup}/>\n            <Route path='/login' component={Login}/>\n            <Route path='/dashboard' component={Dashboard}/>\n            <Route path='/' exact component={Main}/>\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}